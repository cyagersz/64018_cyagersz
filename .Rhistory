q
q()
git
install.packages("rmarkdown")
getwr()
getwd()
setwd("C:/Users/Cole Yagersz/64036_cyagersz")
getwd()
getws()
getwd()
setwd("C:/Users/Cole Yagersz/64018_cyagersz")
installed.packages(lpSolve)
install.packages("lpSolve")
install.packages("lpSolveAPI")
library("lpSolveAPI")   # loads the lp solve library
lprec <- make.lp(0,9)   # make an lp object with 9 decison variables and 0 constarints
set.objfn(lprec,c(420, 420, 420,360, 360, 360,300, 300, 300))   #create the objective function
lp.control(lprec,sense='max')
# Plant capacity constraints
add.constraint(lprec, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 750)   # Plant 1
add.constraint(lprec, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 900)   # Plant 2
add.constraint(lprec, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 450)   # Plant 3
# Storage space constraints
add.constraint(lprec, c(20, 0, 0, 15, 0, 0, 12, 0, 0), "<=", 13000)  # Plant 1
add.constraint(lprec, c(0, 20, 0, 0, 15, 0, 0, 12, 0), "<=", 12000)  # Plant 2
add.constraint(lprec, c(0, 0, 20, 0, 0, 15, 0, 0, 12), "<=", 5000)   # Plant 3
# Sales limits
add.constraint(lprec, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 900)   # Large
add.constraint(lprec, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 1200)  # Medium
add.constraint(lprec, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 750)   # Small
# Equal % Capacity constraints
add.constraint(lprec, c(900, -750, 0, 900, -750, 0, 900, -750, 0), "=", 0)
add.constraint(lprec, c(450, 0, -750, 450, 0, -750, 450, 0, -750), "=", 0)
# Set bounds (non-negative) ---
set.bounds(lprec, lower = rep(0, 9))
lprec
# --- Solve and output results ---
solve(lprec)                 # 0 means optimal
get.objective(lprec)        # Total max profit
get.variables(lprec)        # Values of each variable
get.constraints(lprec)      # Check constraints RHS
lprec <- make.lp(0,9)   # make an lp object with 9 decison variables and 0 constarints
set.objfn(lprec,c(420, 420, 420,360, 360, 360,300, 300, 300))   #create the objective function
lp.control(lprec,sense='max')
# Plant capacity constraints
add.constraint(lprec, c(1, 0, 0, 1, 0, 0, 1, 0, 0), "<=", 750)   # Plant 1
add.constraint(lprec, c(0, 1, 0, 0, 1, 0, 0, 1, 0), "<=", 900)   # Plant 2
add.constraint(lprec, c(0, 0, 1, 0, 0, 1, 0, 0, 1), "<=", 450)   # Plant 3
# Storage space constraints
add.constraint(lprec, c(20, 0, 0, 15, 0, 0, 12, 0, 0), "<=", 13000)  # Plant 1
add.constraint(lprec, c(0, 20, 0, 0, 15, 0, 0, 12, 0), "<=", 12000)  # Plant 2
add.constraint(lprec, c(0, 0, 20, 0, 0, 15, 0, 0, 12), "<=", 5000)   # Plant 3
# Sales limits
add.constraint(lprec, c(1, 1, 1, 0, 0, 0, 0, 0, 0), "<=", 900)   # Large
add.constraint(lprec, c(0, 0, 0, 1, 1, 1, 0, 0, 0), "<=", 1200)  # Medium
add.constraint(lprec, c(0, 0, 0, 0, 0, 0, 1, 1, 1), "<=", 750)   # Small
# Equal % Capacity constraints
add.constraint(lprec, c(900, -750, 0, 900, -750, 0, 900, -750, 0), "=", 0)
add.constraint(lprec, c(450, 0, -750, 450, 0, -750, 450, 0, -750), "=", 0)
# Set bounds (non-negative) ---
set.bounds(lprec, lower = rep(0, 9))
colnames <- c("x1L", "x2L", "x3L", "x1M", "x2M", "x3M", "x1S", "x2S", "x3S")
rownames <- c(
"Plant1_capacity",
"Plant2_capacity",
"Plant3_capacity",
"Storage1",
"Storage2",
"Storage3",
"Large_demand",
"Medium_demand",
"Small_demand",
"EqualCapacity_1_2",
"EqualCapacity_2_3"
)
dimnames(lprec) <- list(rownames, colnames)
lprec
# --- Solve and output results ---
solve(lprec)                 # 0 means optimal
get.objective(lprec)        # Total max profit
get.variables(lprec)        # Values of each variable
get.constraints(lprec)      # Check constraints RHS
x <-read.lp("WeigeIt.lp")   # Creates an lp object from reading file assign to x
x                           # displays x
solve(x)
get.objective(x)     # get objective value
get.variables(x)     # get values of decision variables
get.constraints(x)   # get constraints RHS values
